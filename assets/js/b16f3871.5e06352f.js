"use strict";(self.webpackChunkops_cookbook=self.webpackChunkops_cookbook||[]).push([[834],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return _}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(t),_=r,b=d["".concat(s,".").concat(_)]||d[_]||p[_]||i;return t?a.createElement(b,o(o({ref:n},l),{},{components:t})):a.createElement(b,o({ref:n},l))}));function _(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var u=2;u<i;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9906:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],c={sidebar_position:3},s="Basic Networking Template",u={unversionedId:"aws-recipes/networking",id:"aws-recipes/networking",isDocsHomePage:!1,title:"Basic Networking Template",description:"AWS Network Diagram",source:"@site/docs/aws-recipes/networking.md",sourceDirName:"aws-recipes",slug:"/aws-recipes/networking",permalink:"/ops-cookbook/docs/aws-recipes/networking",editUrl:"https://github.com/madetech/ops-cookbook/edit/main/docs/aws-recipes/networking.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Maintenance Page",permalink:"/ops-cookbook/docs/aws-recipes/maintenance-page"},next:{title:"RDS",permalink:"/ops-cookbook/docs/aws-recipes/rds"}},l=[{value:"Set the variables",id:"set-the-variables",children:[]},{value:"VPC",id:"vpc",children:[]},{value:"Subnets",id:"subnets",children:[]},{value:"ALB",id:"alb",children:[]},{value:"Internet Gateway (routes incoming/outgoing traffic for your VPC)",id:"internet-gateway-routes-incomingoutgoing-traffic-for-your-vpc",children:[]},{value:"NAT Internet Gateway (outgoing traffic)",id:"nat-internet-gateway-outgoing-traffic",children:[]},{value:"Routing",id:"routing",children:[]}],p={toc:l};function d(e){var n=e.components,c=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,c,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-networking-template"},"Basic Networking Template"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"AWS Network Diagram",src:t(260).Z})),(0,i.kt)("p",null,"Using this template as a starting point you will create a single VPC and 3 subnets."),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"Public subnet")," is where the load balancers are attached and anything that requires direct access to the internet."),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"App subnet")," is where your applications can live but any internet access (in or out) is via a routing rule through the Public subnet."),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"DB subnet")," can talk to the App subnet by default but has no internet access in or out by default."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Availability zones")," are configurable but typically 2 for production and 1 for other environments."),(0,i.kt)("p",null,"The ALB forces HTTPS by redirecting HTTP traffic to HTTPS."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"HTTPS is terminated at the ALB so traffic over the private network is not encrypted by default."))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"EIP")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"An EIP is always required for the NAT Gateway and is used as a static IP for outgoing traffic only."))),(0,i.kt)("h2",{id:"set-the-variables"},"Set the variables"),(0,i.kt)("p",null,"The az_count variable is used to configure number of availability zones the subnets are split over."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'variable "az_count" {\n  type        = number\n  description = "Number of AZs to cover in a given region"\n  default     = 2\n}\n\n')),(0,i.kt)("h2",{id:"vpc"},"VPC"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'resource "aws_vpc" "main" {\n  cidr_block           = "10.0.0.0/16"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n}\n')),(0,i.kt)("h2",{id:"subnets"},"Subnets"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'data "aws_availability_zones" "available" {\n}\n\nresource "aws_subnet" "public" {\n  count                   = var.az_count\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = cidrsubnet(aws_vpc.main.cidr_block, 8, count.index)\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\n  map_public_ip_on_launch = true\n}\n\nresource "aws_subnet" "app" {\n  count             = var.az_count\n  vpc_id            = aws_vpc.main.id\n  cidr_block        = cidrsubnet(aws_vpc.main.cidr_block, 8, var.az_count + count.index)\n  availability_zone = data.aws_availability_zones.available.names[count.index]\n}\n\nresource "aws_subnet" "db" {\n  count             = var.az_count\n  vpc_id            = aws_vpc.main.id\n  cidr_block        = cidrsubnet(aws_vpc.main.cidr_block, 8, (2 * var.az_count) + count.index)\n  availability_zone = data.aws_availability_zones.available.names[count.index]\n}\n\nresource "aws_db_subnet_group" "db" {\n  subnet_ids = aws_subnet.db.*.id\n}\n')),(0,i.kt)("h2",{id:"alb"},"ALB"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'resource "aws_alb" "main" {\n  name            = "${terraform.workspace}-myservice"\n  subnets         = aws_subnet.public.*.id\n  security_groups = [aws_security_group.lb.id]\n}\n\nresource "aws_alb_listener" "front_end" {\n  load_balancer_arn = aws_alb.main.id\n  port              = "80"\n  protocol          = "HTTP"\n\n  default_action {\n    type = "redirect"\n\n    redirect {\n      port        = "443"\n      protocol    = "HTTPS"\n      status_code = "HTTP_301"\n    }\n  }\n}\n\nresource "aws_alb_listener" "front_end_ssl" {\n  load_balancer_arn = aws_alb.main.arn\n  port              = "443"\n  protocol          = "HTTPS"\n  ssl_policy        = "ELBSecurityPolicy-2016-08"\n  certificate_arn   = "arn:aws:acm:eu-west-2:232705206979:certificate/b75eecc6-fff7-4114-b100-b1f0eb0641d7"\n\n  default_action {\n    target_group_arn = aws_alb_target_group.webapp.id\n    type             = "forward"\n  }\n}\n\nresource "aws_alb_target_group" "webapp" {\n  name        = "${terraform.workspace}-webapp-target-group"\n  port        = var.webapp_port\n  protocol    = "HTTP"\n  vpc_id      = aws_vpc.main.id\n  target_type = "ip"\n\n  health_check {\n    healthy_threshold   = "3"\n    interval            = "30"\n    protocol            = "HTTP"\n    matcher             = "200"\n    timeout             = "3"\n    path                = var.webapp_health_check_path\n    unhealthy_threshold = "2"\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n')),(0,i.kt)("h2",{id:"internet-gateway-routes-incomingoutgoing-traffic-for-your-vpc"},"Internet Gateway (routes incoming/outgoing traffic for your VPC)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'resource "aws_internet_gateway" "gw" {\n  vpc_id = aws_vpc.main.id\n}\n\nresource "aws_route" "internet_access" {\n  route_table_id         = aws_vpc.main.main_route_table_id\n  destination_cidr_block = "0.0.0.0/0"\n  gateway_id             = aws_internet_gateway.gw.id\n}\n')),(0,i.kt)("h2",{id:"nat-internet-gateway-outgoing-traffic"},"NAT Internet Gateway (outgoing traffic)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'resource "aws_eip" "gw" {\n  count      = var.nat_gateway_count\n  vpc        = true\n  depends_on = [aws_internet_gateway.gw]\n}\n\nresource "aws_nat_gateway" "gw" {\n  count         = var.nat_gateway_count\n  subnet_id     = element(aws_subnet.public.*.id, count.index)\n  allocation_id = element(aws_eip.gw.*.id, count.index)\n}\n')),(0,i.kt)("h2",{id:"routing"},"Routing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'resource "aws_route_table" "private" {\n  count  = var.nat_gateway_count\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block     = "0.0.0.0/0"\n    nat_gateway_id = element(aws_nat_gateway.gw.*.id, count.index)\n  }\n}\n\nresource "aws_route_table_association" "app" {\n  route_table_id = element(aws_route_table.private.*.id, count.index)\n  count          = var.az_count\n  subnet_id      = element(aws_subnet.app.*.id, count.index)\n}\n')))}d.isMDXComponent=!0},260:function(e,n,t){n.Z=t.p+"assets/images/aws-networking-deda1cfa57a0b50ff0920c8729b99645.png"}}]);