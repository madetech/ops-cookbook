"use strict";(self.webpackChunkops_cookbook=self.webpackChunkops_cookbook||[]).push([[551],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return h}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(t),h=r,d=m["".concat(c,".").concat(h)]||m[h]||u[h]||o;return t?a.createElement(d,s(s({ref:n},p),{},{components:t})):a.createElement(d,s({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8131:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),s=["components"],i={sidebar_position:7},c="ECS CloudWatch",l={unversionedId:"aws-recipes/ecs-cloudwatch",id:"aws-recipes/ecs-cloudwatch",isDocsHomePage:!1,title:"ECS CloudWatch",description:"Set the variables",source:"@site/docs/aws-recipes/ecs-cloudwatch.md",sourceDirName:"aws-recipes",slug:"/aws-recipes/ecs-cloudwatch",permalink:"/ops-cookbook/docs/aws-recipes/ecs-cloudwatch",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/aws-recipes/ecs-cloudwatch.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"RDS CloudWatch",permalink:"/ops-cookbook/docs/aws-recipes/rds-cloudwatch"},next:{title:"SNS Notifications",permalink:"/ops-cookbook/docs/aws-recipes/sns-notifications"}},p=[{value:"Set the variables",id:"set-the-variables",children:[]},{value:"Alarms",id:"alarms",children:[]}],u={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ecs-cloudwatch"},"ECS CloudWatch"),(0,o.kt)("h2",{id:"set-the-variables"},"Set the variables"),(0,o.kt)("p",null,"The enable_alerts variable is used to turn on/off notifications per environment."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'variable "enable_alerts" {\n  type        = bool\n  description = "When enabled CloudWatch alarm events are sent to the Alerts SNS Topic"\n  default     = false\n}\nvariable "api_service_minimum_task_count" {\n  type        = number\n  description = "Minimum number of expected tasks to be running for the API Service"\n  default     = 1\n}\n')),(0,o.kt)("h2",{id:"alarms"},"Alarms"),(0,o.kt)("p",null,"Each ECS service has an expected number of tasks running, often this is just a single task (e.g the web server). It's a useful way to check if the ECS service is healthy and alert on it."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Your Docker image should also have a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#healthcheck"},"health check")," and the service itself a health check endpoint which you can hook ",(0,o.kt)("a",{parentName:"p",href:"health-check"},"Route53 health checks")," into."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'resource "aws_cloudwatch_metric_alarm" "ecs_webapp_task_count_too_low" {\n  alarm_name          = "ecs-${aws_ecs_service.webapp.name}-lowTaskCount"\n  comparison_operator = "LessThanThreshold"\n  evaluation_periods  = 1\n  metric_name         = "CPUUtilization"\n  namespace           = "AWS/ECS"\n  period              = 60\n  statistic           = "SampleCount"\n  threshold           = var.webapp_minimum_task_count\n  treat_missing_data  = "breaching"\n  alarm_description   = "Task count is too low."\n  alarm_actions       = var.enable_alerts == true ? [aws_sns_topic.sns_technical_alerts.arn] : []\n  ok_actions          = var.enable_alerts == true ? [aws_sns_topic.sns_technical_alerts.arn] : []\n\n  dimensions = {\n    ClusterName = "${aws_ecs_cluster.main.name}"\n    ServiceName = "${aws_ecs_service.webapp.name}"\n\n  }\n}\n\nresource "aws_cloudwatch_metric_alarm" "ecs_webapp_cpu_too_high" {\n  alarm_name          = "ecs-${aws_ecs_service.webapp.name}-highCPUUtilization"\n  comparison_operator = "GreaterThanThreshold"\n  evaluation_periods  = 5\n  metric_name         = "CPUUtilization"\n  namespace           = "AWS/ECS"\n  period              = 300\n  statistic           = "Average"\n  threshold           = 80\n  treat_missing_data  = "breaching"\n  alarm_description   = "Average CPU utilization is too high."\n  alarm_actions       = var.enable_alerts == true ? [aws_sns_topic.sns_technical_alerts.arn] : []\n  ok_actions          = var.enable_alerts == true ? [aws_sns_topic.sns_technical_alerts.arn] : []\n\n  dimensions = {\n    ClusterName = "${aws_ecs_cluster.main.name}"\n    ServiceName = "${aws_ecs_service.webapp.name}"\n  }\n}\n\nresource "aws_cloudwatch_metric_alarm" "ecs_webapp_memory_too_high" {\n  alarm_name          = "ecs-${aws_ecs_service.webapp.name}-highMemoryUtilization"\n  comparison_operator = "GreaterThanThreshold"\n  evaluation_periods  = 5\n  metric_name         = "MemoryUtilization"\n  namespace           = "AWS/ECS"\n  period              = 300\n  statistic           = "Average"\n  threshold           = 80\n  treat_missing_data  = "breaching"\n  alarm_description   = "Average Memory utilization is too high."\n  alarm_actions       = var.enable_alerts == true ? [aws_sns_topic.sns_technical_alerts.arn] : []\n  ok_actions          = var.enable_alerts == true ? [aws_sns_topic.sns_technical_alerts.arn] : []\n\n  dimensions = {\n    ClusterName = "${aws_ecs_cluster.main.name}"\n    ServiceName = "${aws_ecs_service.webapp.name}"\n  }\n}\n\n')))}m.isMDXComponent=!0}}]);